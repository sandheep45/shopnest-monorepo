// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Status {
  PUBLISHED
  DRAFT
  INACTIVE
  SCHEDULED
}

enum Mediatype {
  IMAGE
  VIDEO
}

model Options {
  id    String @id @default(cuid())
  name  String
  value String

  Variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model Media {
  id   String    @id @default(cuid())
  type Mediatype
  url  String

  variantId String?
  Variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  Product  Product[]
  Category Category[]
  User     User[]
}

model Product {
  id          String @id @default(cuid())
  name        String
  tags        String
  description String
  status      Status
  rating      Int
  width       Int
  height      Int
  length      Int
  weight      Int

  VariantOptions VariantOptions[]
  MetaData       MetaData[]
  CustometReview CustomerReview[]
  Variant        Variant[]

  mediaId String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
}

model Variant {
  id                  String    @id @default(cuid())
  description         String
  sku                 Int
  price               Int
  options             Options[]
  barcode             Int
  taxPercent          Int
  onSelfQuantity      Int
  inWareHouseQuantity Int

  Media           Media[]
  VariantMetaData MetaData[]

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model VariantOptions {
  id    String @id @default(cuid())
  name  String
  value String

  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model MetaData {
  id          String @id @default(cuid())
  title       String
  description String
  keywords    String

  productId String?
  Product   Product? @relation(fields: [productId], references: [id])

  variantId String?
  Variant   Variant? @relation(fields: [variantId], references: [id])

  categoryId String?
  Category   Category? @relation(fields: [categoryId], references: [id])
}

model CustomerReview {
  id        String   @id @default(cuid())
  title     String
  comment   String
  rating    Int
  createdAt DateTime @default(now())

  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String?
  User   User?   @relation(fields: [userId], references: [id])
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String
  status      Status
  tags        String

  mediaId String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Metadata MetaData[]
  Product  Product[]
}

model Tags {
  id   String @id @default(cuid())
  name String @unique
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  email          String     @unique
  hashedPassword String?
  status         UserStatus @default(ACTIVE)
  role           Role       @default(ADMIN)

  mediaId String?
  Media   Media?  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  sessions       Session[]
  CustomerReview CustomerReview[]

  emailVerified DateTime?
  image         String?
  accounts      Account[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
