// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/schema" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Status {
  PUBLISHED
  DRAFT
  INACTIVE
  SCHEDULED
}

enum Mediatype {
  IMAGE
  VIDEO
}

model Options {
  id    String @id @default(cuid())
  name  String
  value String

  Variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
}

model Media {
  id   String    @id @default(cuid())
  type Mediatype
  url  String

  variantId String?
  Variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  Product  Product[]
  Category Category[]
  User     User[]
}

model Product {
  id          String @id @default(cuid())
  name        String
  tags        String
  description String
  status      Status
  rating      Int
  width       Int
  height      Int
  length      Int
  weight      Int

  VariantOptions VariantOptions[]
  MetaData       MetaData[]
  CustometReview CustomerReview[]
  Variant        Variant[]

  mediaId String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
}

model Variant {
  id                  String    @id @default(cuid())
  description         String
  sku                 Int
  price               Int
  options             Options[]
  barcode             Int
  taxPercent          Int
  onSelfQuantity      Int
  inWareHouseQuantity Int

  Media           Media[]
  VariantMetaData MetaData[]

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model VariantOptions {
  id    String @id @default(cuid())
  name  String
  value String

  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model MetaData {
  id          String @id @default(cuid())
  title       String
  description String
  keywords    String

  productId String?
  Product   Product? @relation(fields: [productId], references: [id])

  variantId String?
  Variant   Variant? @relation(fields: [variantId], references: [id])

  categoryId String?
  Category   Category? @relation(fields: [categoryId], references: [id])
}

model CustomerReview {
  id        String   @id @default(cuid())
  title     String
  comment   String
  rating    Int
  createdAt DateTime @default(now())

  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String?
  User   User?   @relation(fields: [userId], references: [id])
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String
  status      Status
  tags        String

  mediaId String
  Media   Media  @relation(fields: [mediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  Metadata MetaData[]
  Product  Product[]
}

model Tags {
  id   String @id @default(cuid())
  name String @unique
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String?
  username       String     @unique
  email          String     @unique
  hashedPassword String?
  status         UserStatus @default(ACTIVE)
  role           Role       @default(ADMIN)

  mediaId String?
  Media   Media?  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  CustomerReview CustomerReview[]

  emailVerified DateTime?
  image         String?
  accounts      Account[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
